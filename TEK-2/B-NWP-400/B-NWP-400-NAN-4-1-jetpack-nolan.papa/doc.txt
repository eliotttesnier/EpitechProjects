Network Programming Working Group                                      Epitech

Category: Informational                                             April 2025

       RFC: Binary Protocol and Map Format for Jetpack Epitech Project

Status of This Memo

   This document defines the binary communication protocol and map format
   for the Jetpack game project. This protocol is designed for real-time
   multiplayer gameplay, enabling efficient and responsive network
   communication.

Table of Contents

   1. Introduction ................................................ 2
   2. Protocol Overview ........................................... 2
   3. Packet Structure ............................................ 2
       3.1. Magic Number .......................................... 3
       3.2. Data List Format ...................................... 3
       3.3. Data Types ............................................ 3
   4. Communication Flow .......................................... 5
       4.1. Connection Procedure .................................. 5
       4.2. Server Pacing ......................................... 6
       4.3. Packet Processing ..................................... 6
   5. Map Format .................................................. 6
       5.1. Map Requirements ...................................... 7
       5.2. Map Symbols ........................................... 7
       5.3. Example Map ........................................... 7
   6. Security Considerations ..................................... 7

1. Introduction

   This document specifies a binary protocol and map format for the
   Jetpack game. The protocol supports real-time communication between
   server and clients in a multiplayer environment. Its goals are low
   latency, efficiency, and extensibility.

2. Protocol Overview

   The communication is based on binary packets, each structured with
   a magic number, a list count, and subsequent data lists. Each data
   list describes a specific set of game-related information such as
   player state, environment changes, or game configuration.

   The server sends data at a constant rate (20Hz), and clients respond
   accordingly. The protocol supports features like player movements,
   coin placement, hazards, game state changes, and input management.

3. Packet Structure

   Packet Format:

   +-----------------------------------+--------------------+
   |               Header              |      Payload       |
   +-----------------+-----------------+--------------------+
   |      Magic      | Data list Count |  Data list(s)...   |
   +--------+--------+-----------------+--------------------+
   |  0x2A  |  0x2A  |     nb lists    |       content      |
   +--------+--------+-----------------+--------------------+
   |   42   |   42   |     4 bits      |        n bits      |
   +--------+--------+-----------------+--------------------+

3.1. Magic Number

   Every packet begins with two bytes of value 42 (0x2A), ensuring packet
   integrity and easy recognition.

3.2. Data List Format

   A data list is made of:

   +----------------+---------------+----------------------------------+
   |   Data Count   |   Data Type   |            Actual Data           |
   +----------------+---------------+----------------------------------+
   |     10 bits    |     6 bits    |              n bits              |
   +----------------+---------------+----------------------------------+

   - Data Count: number of values in the list
   - Data Type: type of values in the list
   - Actual Data: encoded data values

3.3. Data Types

   +-----+------------------+-------------+----------------------------+
   | ID  | Data Type        | Size        | Description                |
   +-----+------------------+-------------+----------------------------+
   | 0   | Unused/Special   | Variable    | Reserved                   |
   | 1   | int              | 4 bytes     | Signed integer             |
   | 2   | size_t           | 8 bytes     | Unsigned long              |
   | 3   | bool             | 1 byte      | Boolean value              |
   | 4   | double           | 8 bytes     | Double float               |
   | 5   | float            | 4 bytes     | Single float               |
   | 6   | short            | 2 bytes     | Short integer              |
   | 7   | struct player    | Variable    | Player data structure      |
   | 8   | name (char[20])  | 20 bytes    | Fixed length name string   |
   | 9   | struct coinsPos_s| Variable    | Coin position X,Y          |
   | 10  | struct obstacle_s| Variable    | Hazard position X,Y        |
   | 11  | enum command     | Variable    | Game control command       |
   | 12  | gamespeed        | 4 bytes     | Speed in ms per grid       |
   | 13  | Player_input     | 1 byte      | Boolean input flag         |
   | 14  | start            | 0 bytes     | Signal start of game       |
   | 15  | healthcheck      | 0 bytes     | Used for connection check  |
   | 16  | jetpack_force    | 4 bytes     | Jetpack thrust             |
   | 17  | Velocity_limits  | 8 bytes     | Two float velocities       |
   | 18  | getNbPlayers     | 0 bytes     | Ask for number of players  |
   | 19  | nbPlayers        | 4 bytes     | Number of players (int)    |
   | 20  | endOfGame        | 0 bytes     | End of the game            |
   +-----+------------------+-------------+----------------------------+

4. Communication Flow

4.1. Connection Procedure

   First packet to client:

   +---------+----------+---------+---------+-----------+--------+
   |  Magic  | nb lists | nb data | data ID | player ID | speed  |
   +---------+----------+---------+---------+-----------+--------+
   | 42  42  |    1     |    2    |    2    | size_t    | size_t |
   +---------+----------+---------+---------+-----------+--------+

   If a client receives a malformed first packet, it must discard it.

4.2. Server Pacing

   The server sends 20 packets per second (every 50ms). Clients can
   interpolate positions between packets to improve smoothness.

4.3. Packet Processing

   On each tick:

   Ret = Read(buffer, buffsize)
   Handle(buffer)
   if (ret == buffsize && read(buffer) > 0)
       // continue handling data

5. Map Format

5.1. Map Requirements

   - 10 rows exactly
   - Consistent width for each row
   - End each line with a newline character

5.2. Map Symbols

   - ' ' (space): Empty space
   - '*' : Coin
   - '#' : Hazard

5.3. Example Map

   - Map-height : 10
   - Map-width : Infinite

   +------------------------------------------------
   |          #
   |          #      ******
   |          #     *******
   |          #    **
   |          #   **      #
   |             **       #
   |       *******        #
   |       ******         #
   |                      #
   |                      #
   +------------------------------------------------

6. Security Considerations

   - Validate magic numbers
   - Ensure data types match expected sizes
   - Discard malformed packets
   - Use healthcheck packets to detect dropped clients
